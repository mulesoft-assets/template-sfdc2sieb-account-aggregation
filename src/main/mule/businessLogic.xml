<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel"
      xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:email="http://www.mulesoft.org/schema/mule/email"
      xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/current/mule-siebel.xsd">
    <flow name="businessLogicFlow">
        <scatter-gather doc:name="Scatter-Gather">
            <route>
                <salesforce:query doc:name="Query Accounts from Salesforce" doc:id="d7b708a4-053e-4e59-9ebc-23c06855b8a1" config-ref="Salesforce_Config">
					<salesforce:salesforce-query >SELECT Id,Industry,Name,NumberOfEmployees FROM Account</salesforce:salesforce-query>
				</salesforce:query>
				<logger level="INFO" doc:name="Log Accounts from Salesforce" message="Accounts from Salesforce: #[output application/json --- payload]"/>
            </route>
            <route>
				<ee:transform doc:name="Prepare query" doc:id="66f24f66-6ece-4fb5-b0fc-005840ff74b6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	"fields" : ["Id", "Industry", "Name", "Employees"]
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<siebel:query-business-components businessObjectComponentType="Account.Account" doc:name="Query all accounts from Siebel" doc:id="c7a0646a-3ccc-4d55-afa0-78b678fa8a40" config-ref="Siebel_JDB_Siebel"/>
				<logger level="INFO" doc:name="Log Accounts from Siebel" message="Accounts from Siebel: #[output application/json --- payload]"/>
            </route>
        </scatter-gather>
		<ee:transform doc:name="Aggregate results and transform to CSV" doc:id="54101da3-a22e-4e2d-b4ac-8d3caca105fd">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var accountsSalesforce = payload["0"].payload map (account) -> {
	"IDInSalesforce": account.Id,
	"Name": account.Name,
	"IndustryInSalesforce": account.Industry,
	"NumberOfEmployeesInSalesforce": account.NumberOfEmployees
}
var accountsSiebel = payload["1"].payload map (account) -> {
	"IDInSiebel": account.Id,
	"Name": account.Name,
	"IndustryInSiebel": account.Industry,
	"NumberOfEmployeesInSiebel": account.Employees
}
var mergedItems =  (
                accountsSalesforce map ((account) -> account mergeWith ((accountsSiebel filter ($.Name == account.Name))[0]
                    default {IDInSiebel: ""}
                ))
            ) distinctBy $.Name
            ++ (
                accountsSiebel map ((account) -> account mergeWith ((accountsSalesforce filter ($.Name == account.Name))[0]
                    default {IDInSalesforce: ""}
                ))
            ) distinctBy $.Name
fun sortBySourceExistence (accounts) = ((accounts map (account) -> (
        account ++ {
            sortValue:  if ((account.IDInSalesforce != "") and (account.IDInSiebel == "")) 1
                        else if ((account.IDInSiebel != "") and (account.IDInSalesforce == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (account) -> {
	"Name": account.Name,
	"IDInSalesforce": account.IDInSalesforce,
	"IndustryInSalesforce": account.IndustryInSalesforce,
	"NumberOfEmployeesInSalesforce": account.NumberOfEmployeesInSalesforce,
	"IDInSiebel": account.IDInSiebel,
	"IndustryInSiebel": account.IndustryInSiebel,
	"NumberOfEmployeesInSiebel": account.NumberOfEmployeesInSiebel
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>

        </email:send>
    </flow>
    <flow name="mainFlow">
        <flow-ref doc:name="Call businessLogicFlow" name="businessLogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        